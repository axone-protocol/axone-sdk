// Code generated by MockGen. DO NOT EDIT.
// Source: keys/keyring.go
//
// Generated by this command:
//
//	mockgen -source=keys/keyring.go -package testutil -destination testutil/keyring_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/crypto/types"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyring is a mock of Keyring interface.
type MockKeyring struct {
	ctrl     *gomock.Controller
	recorder *MockKeyringMockRecorder
}

// MockKeyringMockRecorder is the mock recorder for MockKeyring.
type MockKeyringMockRecorder struct {
	mock *MockKeyring
}

// NewMockKeyring creates a new mock instance.
func NewMockKeyring(ctrl *gomock.Controller) *MockKeyring {
	mock := &MockKeyring{ctrl: ctrl}
	mock.recorder = &MockKeyringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyring) EXPECT() *MockKeyringMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockKeyring) Addr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockKeyringMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockKeyring)(nil).Addr))
}

// Alg mocks base method.
func (m *MockKeyring) Alg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alg")
	ret0, _ := ret[0].(string)
	return ret0
}

// Alg indicates an expected call of Alg.
func (mr *MockKeyringMockRecorder) Alg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alg", reflect.TypeOf((*MockKeyring)(nil).Alg))
}

// DID mocks base method.
func (m *MockKeyring) DID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DID indicates an expected call of DID.
func (mr *MockKeyringMockRecorder) DID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DID", reflect.TypeOf((*MockKeyring)(nil).DID))
}

// DIDKeyID mocks base method.
func (m *MockKeyring) DIDKeyID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DIDKeyID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DIDKeyID indicates an expected call of DIDKeyID.
func (mr *MockKeyringMockRecorder) DIDKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DIDKeyID", reflect.TypeOf((*MockKeyring)(nil).DIDKeyID))
}

// PubKey mocks base method.
func (m *MockKeyring) PubKey() types.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubKey")
	ret0, _ := ret[0].(types.PubKey)
	return ret0
}

// PubKey indicates an expected call of PubKey.
func (mr *MockKeyringMockRecorder) PubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubKey", reflect.TypeOf((*MockKeyring)(nil).PubKey))
}

// Sign mocks base method.
func (m *MockKeyring) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockKeyringMockRecorder) Sign(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockKeyring)(nil).Sign), msg)
}
