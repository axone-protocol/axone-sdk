// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/axone-protocol/axone-contract-schema/go/dataverse-schema/v5 (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package testutil -destination testutil/dataverse_client_mocks.go -mock_names QueryClient=MockDataverseQueryClient github.com/axone-protocol/axone-contract-schema/go/dataverse-schema/v5 QueryClient
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	schema "github.com/axone-protocol/axone-contract-schema/go/dataverse-schema/v5"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDataverseQueryClient is a mock of QueryClient interface.
type MockDataverseQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataverseQueryClientMockRecorder
}

// MockDataverseQueryClientMockRecorder is the mock recorder for MockDataverseQueryClient.
type MockDataverseQueryClientMockRecorder struct {
	mock *MockDataverseQueryClient
}

// NewMockDataverseQueryClient creates a new mock instance.
func NewMockDataverseQueryClient(ctrl *gomock.Controller) *MockDataverseQueryClient {
	mock := &MockDataverseQueryClient{ctrl: ctrl}
	mock.recorder = &MockDataverseQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataverseQueryClient) EXPECT() *MockDataverseQueryClientMockRecorder {
	return m.recorder
}

// Dataverse mocks base method.
func (m *MockDataverseQueryClient) Dataverse(arg0 context.Context, arg1 *schema.QueryMsg_Dataverse, arg2 ...grpc.CallOption) (*schema.DataverseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dataverse", varargs...)
	ret0, _ := ret[0].(*schema.DataverseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dataverse indicates an expected call of Dataverse.
func (mr *MockDataverseQueryClientMockRecorder) Dataverse(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dataverse", reflect.TypeOf((*MockDataverseQueryClient)(nil).Dataverse), varargs...)
}
