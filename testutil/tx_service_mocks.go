// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/types/tx (interfaces: ServiceClient)
//
// Generated by this command:
//
//	mockgen -package testutil -destination testutil/tx_service_mocks.go -mock_names ServiceClient=MockTxServiceClient github.com/cosmos/cosmos-sdk/types/tx ServiceClient
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTxServiceClient is a mock of ServiceClient interface.
type MockTxServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxServiceClientMockRecorder
}

// MockTxServiceClientMockRecorder is the mock recorder for MockTxServiceClient.
type MockTxServiceClientMockRecorder struct {
	mock *MockTxServiceClient
}

// NewMockTxServiceClient creates a new mock instance.
func NewMockTxServiceClient(ctrl *gomock.Controller) *MockTxServiceClient {
	mock := &MockTxServiceClient{ctrl: ctrl}
	mock.recorder = &MockTxServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxServiceClient) EXPECT() *MockTxServiceClientMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method.
func (m *MockTxServiceClient) BroadcastTx(arg0 context.Context, arg1 *tx.BroadcastTxRequest, arg2 ...grpc.CallOption) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BroadcastTx", varargs...)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTx indicates an expected call of BroadcastTx.
func (mr *MockTxServiceClientMockRecorder) BroadcastTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockTxServiceClient)(nil).BroadcastTx), varargs...)
}

// GetBlockWithTxs mocks base method.
func (m *MockTxServiceClient) GetBlockWithTxs(arg0 context.Context, arg1 *tx.GetBlockWithTxsRequest, arg2 ...grpc.CallOption) (*tx.GetBlockWithTxsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockWithTxs", varargs...)
	ret0, _ := ret[0].(*tx.GetBlockWithTxsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithTxs indicates an expected call of GetBlockWithTxs.
func (mr *MockTxServiceClientMockRecorder) GetBlockWithTxs(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithTxs", reflect.TypeOf((*MockTxServiceClient)(nil).GetBlockWithTxs), varargs...)
}

// GetTx mocks base method.
func (m *MockTxServiceClient) GetTx(arg0 context.Context, arg1 *tx.GetTxRequest, arg2 ...grpc.CallOption) (*tx.GetTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTx", varargs...)
	ret0, _ := ret[0].(*tx.GetTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxServiceClientMockRecorder) GetTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxServiceClient)(nil).GetTx), varargs...)
}

// GetTxsEvent mocks base method.
func (m *MockTxServiceClient) GetTxsEvent(arg0 context.Context, arg1 *tx.GetTxsEventRequest, arg2 ...grpc.CallOption) (*tx.GetTxsEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxsEvent", varargs...)
	ret0, _ := ret[0].(*tx.GetTxsEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxsEvent indicates an expected call of GetTxsEvent.
func (mr *MockTxServiceClientMockRecorder) GetTxsEvent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxsEvent", reflect.TypeOf((*MockTxServiceClient)(nil).GetTxsEvent), varargs...)
}

// Simulate mocks base method.
func (m *MockTxServiceClient) Simulate(arg0 context.Context, arg1 *tx.SimulateRequest, arg2 ...grpc.CallOption) (*tx.SimulateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Simulate", varargs...)
	ret0, _ := ret[0].(*tx.SimulateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Simulate indicates an expected call of Simulate.
func (mr *MockTxServiceClientMockRecorder) Simulate(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockTxServiceClient)(nil).Simulate), varargs...)
}

// TxDecode mocks base method.
func (m *MockTxServiceClient) TxDecode(arg0 context.Context, arg1 *tx.TxDecodeRequest, arg2 ...grpc.CallOption) (*tx.TxDecodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TxDecode", varargs...)
	ret0, _ := ret[0].(*tx.TxDecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxDecode indicates an expected call of TxDecode.
func (mr *MockTxServiceClientMockRecorder) TxDecode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecode", reflect.TypeOf((*MockTxServiceClient)(nil).TxDecode), varargs...)
}

// TxDecodeAmino mocks base method.
func (m *MockTxServiceClient) TxDecodeAmino(arg0 context.Context, arg1 *tx.TxDecodeAminoRequest, arg2 ...grpc.CallOption) (*tx.TxDecodeAminoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TxDecodeAmino", varargs...)
	ret0, _ := ret[0].(*tx.TxDecodeAminoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxDecodeAmino indicates an expected call of TxDecodeAmino.
func (mr *MockTxServiceClientMockRecorder) TxDecodeAmino(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecodeAmino", reflect.TypeOf((*MockTxServiceClient)(nil).TxDecodeAmino), varargs...)
}

// TxEncode mocks base method.
func (m *MockTxServiceClient) TxEncode(arg0 context.Context, arg1 *tx.TxEncodeRequest, arg2 ...grpc.CallOption) (*tx.TxEncodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TxEncode", varargs...)
	ret0, _ := ret[0].(*tx.TxEncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxEncode indicates an expected call of TxEncode.
func (mr *MockTxServiceClientMockRecorder) TxEncode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncode", reflect.TypeOf((*MockTxServiceClient)(nil).TxEncode), varargs...)
}

// TxEncodeAmino mocks base method.
func (m *MockTxServiceClient) TxEncodeAmino(arg0 context.Context, arg1 *tx.TxEncodeAminoRequest, arg2 ...grpc.CallOption) (*tx.TxEncodeAminoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TxEncodeAmino", varargs...)
	ret0, _ := ret[0].(*tx.TxEncodeAminoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxEncodeAmino indicates an expected call of TxEncodeAmino.
func (mr *MockTxServiceClientMockRecorder) TxEncodeAmino(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncodeAmino", reflect.TypeOf((*MockTxServiceClient)(nil).TxEncodeAmino), varargs...)
}
