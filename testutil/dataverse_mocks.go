// Code generated by MockGen. DO NOT EDIT.
// Source: dataverse/client.go
//
// Generated by this command:
//
//	mockgen -source=dataverse/client.go -mock_names TxClient=MockDataverseTxClient -package testutil -destination testutil/dataverse_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	verifiable "github.com/hyperledger/aries-framework-go/pkg/doc/verifiable"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// AskGovPermittedActions mocks base method.
func (m *MockQueryClient) AskGovPermittedActions(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovPermittedActions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovPermittedActions indicates an expected call of AskGovPermittedActions.
func (mr *MockQueryClientMockRecorder) AskGovPermittedActions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovPermittedActions", reflect.TypeOf((*MockQueryClient)(nil).AskGovPermittedActions), arg0, arg1, arg2)
}

// AskGovTellAction mocks base method.
func (m *MockQueryClient) AskGovTellAction(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovTellAction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovTellAction indicates an expected call of AskGovTellAction.
func (mr *MockQueryClientMockRecorder) AskGovTellAction(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovTellAction", reflect.TypeOf((*MockQueryClient)(nil).AskGovTellAction), arg0, arg1, arg2, arg3)
}

// GetResourceGovAddr mocks base method.
func (m *MockQueryClient) GetResourceGovAddr(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGovAddr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGovAddr indicates an expected call of GetResourceGovAddr.
func (mr *MockQueryClientMockRecorder) GetResourceGovAddr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGovAddr", reflect.TypeOf((*MockQueryClient)(nil).GetResourceGovAddr), arg0, arg1)
}

// MockDataverseTxClient is a mock of TxClient interface.
type MockDataverseTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataverseTxClientMockRecorder
}

// MockDataverseTxClientMockRecorder is the mock recorder for MockDataverseTxClient.
type MockDataverseTxClientMockRecorder struct {
	mock *MockDataverseTxClient
}

// NewMockDataverseTxClient creates a new mock instance.
func NewMockDataverseTxClient(ctrl *gomock.Controller) *MockDataverseTxClient {
	mock := &MockDataverseTxClient{ctrl: ctrl}
	mock.recorder = &MockDataverseTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataverseTxClient) EXPECT() *MockDataverseTxClientMockRecorder {
	return m.recorder
}

// SubmitClaims mocks base method.
func (m *MockDataverseTxClient) SubmitClaims(ctx context.Context, credential *verifiable.Credential) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitClaims", ctx, credential)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitClaims indicates an expected call of SubmitClaims.
func (mr *MockDataverseTxClientMockRecorder) SubmitClaims(ctx, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitClaims", reflect.TypeOf((*MockDataverseTxClient)(nil).SubmitClaims), ctx, credential)
}
