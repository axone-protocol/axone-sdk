// Code generated by MockGen. DO NOT EDIT.
// Source: dataverse/client.go
//
// Generated by this command:
//
//	mockgen -source=dataverse/client.go -package testutil -destination testutil/dataverse_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	keys "github.com/axone-protocol/axone-sdk/keys"
	verifiable "github.com/hyperledger/aries-framework-go/pkg/doc/verifiable"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AskGovPermittedActions mocks base method.
func (m *MockClient) AskGovPermittedActions(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovPermittedActions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovPermittedActions indicates an expected call of AskGovPermittedActions.
func (mr *MockClientMockRecorder) AskGovPermittedActions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovPermittedActions", reflect.TypeOf((*MockClient)(nil).AskGovPermittedActions), arg0, arg1, arg2)
}

// AskGovTellAction mocks base method.
func (m *MockClient) AskGovTellAction(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovTellAction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovTellAction indicates an expected call of AskGovTellAction.
func (mr *MockClientMockRecorder) AskGovTellAction(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovTellAction", reflect.TypeOf((*MockClient)(nil).AskGovTellAction), arg0, arg1, arg2, arg3)
}

// GetResourceGovAddr mocks base method.
func (m *MockClient) GetResourceGovAddr(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGovAddr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGovAddr indicates an expected call of GetResourceGovAddr.
func (mr *MockClientMockRecorder) GetResourceGovAddr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGovAddr", reflect.TypeOf((*MockClient)(nil).GetResourceGovAddr), arg0, arg1)
}

// SubmitClaims mocks base method.
func (m *MockClient) SubmitClaims(ctx context.Context, credential *verifiable.Credential, signer keys.Keyring) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitClaims", ctx, credential, signer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitClaims indicates an expected call of SubmitClaims.
func (mr *MockClientMockRecorder) SubmitClaims(ctx, credential, signer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitClaims", reflect.TypeOf((*MockClient)(nil).SubmitClaims), ctx, credential, signer)
}
