// Code generated by MockGen. DO NOT EDIT.
// Source: tx/transaction.go
//
// Generated by this command:
//
//	mockgen -source=tx/transaction.go -package testutil -destination testutil/transaction_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetSignedTx mocks base method.
func (m *MockTransaction) GetSignedTx(ctx context.Context, accNum, accSeq uint64, chainID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedTx", ctx, accNum, accSeq, chainID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedTx indicates an expected call of GetSignedTx.
func (mr *MockTransactionMockRecorder) GetSignedTx(ctx, accNum, accSeq, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedTx", reflect.TypeOf((*MockTransaction)(nil).GetSignedTx), ctx, accNum, accSeq, chainID)
}

// Sender mocks base method.
func (m *MockTransaction) Sender() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(string)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MockTransactionMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockTransaction)(nil).Sender))
}
