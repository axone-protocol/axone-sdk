// Code generated by MockGen. DO NOT EDIT.
// Source: tx/client.go
//
// Generated by this command:
//
//	mockgen -source=tx/client.go -mock_names Client=MockTxClient -package testutil -destination testutil/tx_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	tx "github.com/axone-protocol/axone-sdk/tx"
	types "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTxClient is a mock of Client interface.
type MockTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxClientMockRecorder
}

// MockTxClientMockRecorder is the mock recorder for MockTxClient.
type MockTxClientMockRecorder struct {
	mock *MockTxClient
}

// NewMockTxClient creates a new mock instance.
func NewMockTxClient(ctrl *gomock.Controller) *MockTxClient {
	mock := &MockTxClient{ctrl: ctrl}
	mock.recorder = &MockTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxClient) EXPECT() *MockTxClientMockRecorder {
	return m.recorder
}

// SendTx mocks base method.
func (m *MockTxClient) SendTx(ctx context.Context, transaction tx.Transaction) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTx", ctx, transaction)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTx indicates an expected call of SendTx.
func (mr *MockTxClientMockRecorder) SendTx(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTx", reflect.TypeOf((*MockTxClient)(nil).SendTx), ctx, transaction)
}
