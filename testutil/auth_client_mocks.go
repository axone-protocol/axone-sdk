// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/x/auth/types (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package testutil -destination testutil/auth_client_mocks.go -mock_names QueryClient=MockAuthQueryClient github.com/cosmos/cosmos-sdk/x/auth/types QueryClient
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthQueryClient is a mock of QueryClient interface.
type MockAuthQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthQueryClientMockRecorder
}

// MockAuthQueryClientMockRecorder is the mock recorder for MockAuthQueryClient.
type MockAuthQueryClientMockRecorder struct {
	mock *MockAuthQueryClient
}

// NewMockAuthQueryClient creates a new mock instance.
func NewMockAuthQueryClient(ctrl *gomock.Controller) *MockAuthQueryClient {
	mock := &MockAuthQueryClient{ctrl: ctrl}
	mock.recorder = &MockAuthQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthQueryClient) EXPECT() *MockAuthQueryClientMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockAuthQueryClient) Account(arg0 context.Context, arg1 *types.QueryAccountRequest, arg2 ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Account", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockAuthQueryClientMockRecorder) Account(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAuthQueryClient)(nil).Account), varargs...)
}

// AccountAddressByID mocks base method.
func (m *MockAuthQueryClient) AccountAddressByID(arg0 context.Context, arg1 *types.QueryAccountAddressByIDRequest, arg2 ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddressByID", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountAddressByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddressByID indicates an expected call of AccountAddressByID.
func (mr *MockAuthQueryClientMockRecorder) AccountAddressByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddressByID", reflect.TypeOf((*MockAuthQueryClient)(nil).AccountAddressByID), varargs...)
}

// AccountInfo mocks base method.
func (m *MockAuthQueryClient) AccountInfo(arg0 context.Context, arg1 *types.QueryAccountInfoRequest, arg2 ...grpc.CallOption) (*types.QueryAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountInfo", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockAuthQueryClientMockRecorder) AccountInfo(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockAuthQueryClient)(nil).AccountInfo), varargs...)
}

// Accounts mocks base method.
func (m *MockAuthQueryClient) Accounts(arg0 context.Context, arg1 *types.QueryAccountsRequest, arg2 ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accounts", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockAuthQueryClientMockRecorder) Accounts(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAuthQueryClient)(nil).Accounts), varargs...)
}

// AddressBytesToString mocks base method.
func (m *MockAuthQueryClient) AddressBytesToString(arg0 context.Context, arg1 *types.AddressBytesToStringRequest, arg2 ...grpc.CallOption) (*types.AddressBytesToStringResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddressBytesToString", varargs...)
	ret0, _ := ret[0].(*types.AddressBytesToStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressBytesToString indicates an expected call of AddressBytesToString.
func (mr *MockAuthQueryClientMockRecorder) AddressBytesToString(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressBytesToString", reflect.TypeOf((*MockAuthQueryClient)(nil).AddressBytesToString), varargs...)
}

// AddressStringToBytes mocks base method.
func (m *MockAuthQueryClient) AddressStringToBytes(arg0 context.Context, arg1 *types.AddressStringToBytesRequest, arg2 ...grpc.CallOption) (*types.AddressStringToBytesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddressStringToBytes", varargs...)
	ret0, _ := ret[0].(*types.AddressStringToBytesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressStringToBytes indicates an expected call of AddressStringToBytes.
func (mr *MockAuthQueryClientMockRecorder) AddressStringToBytes(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressStringToBytes", reflect.TypeOf((*MockAuthQueryClient)(nil).AddressStringToBytes), varargs...)
}

// Bech32Prefix mocks base method.
func (m *MockAuthQueryClient) Bech32Prefix(arg0 context.Context, arg1 *types.Bech32PrefixRequest, arg2 ...grpc.CallOption) (*types.Bech32PrefixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bech32Prefix", varargs...)
	ret0, _ := ret[0].(*types.Bech32PrefixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bech32Prefix indicates an expected call of Bech32Prefix.
func (mr *MockAuthQueryClientMockRecorder) Bech32Prefix(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bech32Prefix", reflect.TypeOf((*MockAuthQueryClient)(nil).Bech32Prefix), varargs...)
}

// ModuleAccountByName mocks base method.
func (m *MockAuthQueryClient) ModuleAccountByName(arg0 context.Context, arg1 *types.QueryModuleAccountByNameRequest, arg2 ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccountByName", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccountByName indicates an expected call of ModuleAccountByName.
func (mr *MockAuthQueryClientMockRecorder) ModuleAccountByName(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccountByName", reflect.TypeOf((*MockAuthQueryClient)(nil).ModuleAccountByName), varargs...)
}

// ModuleAccounts mocks base method.
func (m *MockAuthQueryClient) ModuleAccounts(arg0 context.Context, arg1 *types.QueryModuleAccountsRequest, arg2 ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccounts", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccounts indicates an expected call of ModuleAccounts.
func (mr *MockAuthQueryClientMockRecorder) ModuleAccounts(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccounts", reflect.TypeOf((*MockAuthQueryClient)(nil).ModuleAccounts), varargs...)
}

// Params mocks base method.
func (m *MockAuthQueryClient) Params(arg0 context.Context, arg1 *types.QueryParamsRequest, arg2 ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockAuthQueryClientMockRecorder) Params(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockAuthQueryClient)(nil).Params), varargs...)
}
