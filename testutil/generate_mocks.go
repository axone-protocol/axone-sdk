// Code generated by MockGen. DO NOT EDIT.
// Source: credential/generate.go
//
// Generated by this command:
//
//	mockgen -source=credential/generate.go -package testutil -destination testutil/generate_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	bytes "bytes"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDescriptor is a mock of Descriptor interface.
type MockDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorMockRecorder
}

// MockDescriptorMockRecorder is the mock recorder for MockDescriptor.
type MockDescriptorMockRecorder struct {
	mock *MockDescriptor
}

// NewMockDescriptor creates a new mock instance.
func NewMockDescriptor(ctrl *gomock.Controller) *MockDescriptor {
	mock := &MockDescriptor{ctrl: ctrl}
	mock.recorder = &MockDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptor) EXPECT() *MockDescriptorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockDescriptor) Generate() (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockDescriptorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockDescriptor)(nil).Generate))
}

// IssuedAt mocks base method.
func (m *MockDescriptor) IssuedAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// IssuedAt indicates an expected call of IssuedAt.
func (mr *MockDescriptorMockRecorder) IssuedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedAt", reflect.TypeOf((*MockDescriptor)(nil).IssuedAt))
}

// ProofPurpose mocks base method.
func (m *MockDescriptor) ProofPurpose() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProofPurpose")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProofPurpose indicates an expected call of ProofPurpose.
func (mr *MockDescriptorMockRecorder) ProofPurpose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProofPurpose", reflect.TypeOf((*MockDescriptor)(nil).ProofPurpose))
}
