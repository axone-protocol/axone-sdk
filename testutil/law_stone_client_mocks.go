// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/axone-protocol/axone-contract-schema/go/law-stone-schema/v5 (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package testutil -destination testutil/law_stone_client_mocks.go -mock_names QueryClient=MockLawStoneQueryClient github.com/axone-protocol/axone-contract-schema/go/law-stone-schema/v5 QueryClient
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	schema "github.com/axone-protocol/axone-contract-schema/go/law-stone-schema/v5"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLawStoneQueryClient is a mock of QueryClient interface.
type MockLawStoneQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockLawStoneQueryClientMockRecorder
}

// MockLawStoneQueryClientMockRecorder is the mock recorder for MockLawStoneQueryClient.
type MockLawStoneQueryClientMockRecorder struct {
	mock *MockLawStoneQueryClient
}

// NewMockLawStoneQueryClient creates a new mock instance.
func NewMockLawStoneQueryClient(ctrl *gomock.Controller) *MockLawStoneQueryClient {
	mock := &MockLawStoneQueryClient{ctrl: ctrl}
	mock.recorder = &MockLawStoneQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLawStoneQueryClient) EXPECT() *MockLawStoneQueryClientMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockLawStoneQueryClient) Ask(arg0 context.Context, arg1 *schema.QueryMsg_Ask, arg2 ...grpc.CallOption) (*schema.AskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ask", varargs...)
	ret0, _ := ret[0].(*schema.AskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask.
func (mr *MockLawStoneQueryClientMockRecorder) Ask(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockLawStoneQueryClient)(nil).Ask), varargs...)
}

// Program mocks base method.
func (m *MockLawStoneQueryClient) Program(arg0 context.Context, arg1 *schema.QueryMsg_Program, arg2 ...grpc.CallOption) (*schema.ProgramResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Program", varargs...)
	ret0, _ := ret[0].(*schema.ProgramResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Program indicates an expected call of Program.
func (mr *MockLawStoneQueryClientMockRecorder) Program(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Program", reflect.TypeOf((*MockLawStoneQueryClient)(nil).Program), varargs...)
}

// ProgramCode mocks base method.
func (m *MockLawStoneQueryClient) ProgramCode(arg0 context.Context, arg1 *schema.QueryMsg_ProgramCode, arg2 ...grpc.CallOption) (*string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProgramCode", varargs...)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramCode indicates an expected call of ProgramCode.
func (mr *MockLawStoneQueryClientMockRecorder) ProgramCode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramCode", reflect.TypeOf((*MockLawStoneQueryClient)(nil).ProgramCode), varargs...)
}
