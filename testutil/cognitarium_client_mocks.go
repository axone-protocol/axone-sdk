// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/axone-protocol/axone-contract-schema/go/cognitarium-schema/v5 (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package testutil -destination testutil/cognitarium_client_mocks.go -mock_names QueryClient=MockCognitariumQueryClient github.com/axone-protocol/axone-contract-schema/go/cognitarium-schema/v5 QueryClient
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	schema "github.com/axone-protocol/axone-contract-schema/go/cognitarium-schema/v5"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCognitariumQueryClient is a mock of QueryClient interface.
type MockCognitariumQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockCognitariumQueryClientMockRecorder
}

// MockCognitariumQueryClientMockRecorder is the mock recorder for MockCognitariumQueryClient.
type MockCognitariumQueryClientMockRecorder struct {
	mock *MockCognitariumQueryClient
}

// NewMockCognitariumQueryClient creates a new mock instance.
func NewMockCognitariumQueryClient(ctrl *gomock.Controller) *MockCognitariumQueryClient {
	mock := &MockCognitariumQueryClient{ctrl: ctrl}
	mock.recorder = &MockCognitariumQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitariumQueryClient) EXPECT() *MockCognitariumQueryClientMockRecorder {
	return m.recorder
}

// Construct mocks base method.
func (m *MockCognitariumQueryClient) Construct(arg0 context.Context, arg1 *schema.QueryMsg_Construct, arg2 ...grpc.CallOption) (*schema.ConstructResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Construct", varargs...)
	ret0, _ := ret[0].(*schema.ConstructResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Construct indicates an expected call of Construct.
func (mr *MockCognitariumQueryClientMockRecorder) Construct(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockCognitariumQueryClient)(nil).Construct), varargs...)
}

// Describe mocks base method.
func (m *MockCognitariumQueryClient) Describe(arg0 context.Context, arg1 *schema.QueryMsg_Describe, arg2 ...grpc.CallOption) (*schema.DescribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Describe", varargs...)
	ret0, _ := ret[0].(*schema.DescribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe.
func (mr *MockCognitariumQueryClientMockRecorder) Describe(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockCognitariumQueryClient)(nil).Describe), varargs...)
}

// Select mocks base method.
func (m *MockCognitariumQueryClient) Select(arg0 context.Context, arg1 *schema.QueryMsg_Select, arg2 ...grpc.CallOption) (*schema.SelectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*schema.SelectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockCognitariumQueryClientMockRecorder) Select(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockCognitariumQueryClient)(nil).Select), varargs...)
}

// Store mocks base method.
func (m *MockCognitariumQueryClient) Store(arg0 context.Context, arg1 *schema.QueryMsg_Store, arg2 ...grpc.CallOption) (*schema.StoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(*schema.StoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockCognitariumQueryClientMockRecorder) Store(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCognitariumQueryClient)(nil).Store), varargs...)
}
